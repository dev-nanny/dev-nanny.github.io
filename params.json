{"name":"Dev-Nanny","tagline":"Online home for every developers favourite nanny.","body":"The Dev-Nanny project is aimed to make it trivial for developers to improve the\r\nquality of the code they write, regardless of experience level.\r\n\r\nThis primary goal is supported by tools that offer education and enforcement.\r\nAs Dev-Nanny uses various tools to help her make suggestions or improvements, the\r\ndefinition of \"quality\" can be defined by the programmer.\r\n\r\nHowever, if a programmer finds it difficult to define \"quality\", dev-nanny will\r\nmake a suggestion there too.\r\n\r\nThis makes DevNanny ideally suited for both novice programmers as well as\r\nseasoned professionals.\r\n\r\n\r\n## Usage\r\n\r\nEverything should work straight out of the box. DevNanny will be run each time\r\na developer does a `git commit`.\r\n\r\nAfter the next release of Dev-nanny, it can also be run from the command-line using the binary placed in the\r\n`vendor/bin` folder. The full command would be:\r\n\r\n    ./vendor/bin/dev-nanny\r\n\r\nOn each run, all included connectors will be run.\r\n\r\n## Installation\r\n\r\nDev-Nanny needs to be installed per individual project using Composer.\r\nRun the following command on the command-line inside your project folder:\r\n\r\n    php composer.phar require dev-nanny/dev-nanny --dev\r\n\r\nThis will download everything Dev-Nanny needs and install the git hook.\r\n\r\n### Available Connectors\r\n\r\nConnectors are available for the following tools:\r\n\r\n - Php Lint (also known as `php -l`)\r\n\r\nPlanned Connectors:\r\n\r\n - Config Checker (compares config files of various services against DevNanny/Config\r\n   package and make suggestions for improvement)\r\n - Other Lints (js, css, yml, scss, xml, bash, etc.)\r\n - QA Tools (CodeSniffer, Copy/Paste Detector, Mess Detector, etc.)\r\n - Test Runners (PhpUnit, Behat, Codeception, PhpSpec, etc.)\r\n\r\n## What's in the box?\r\n\r\n### Packages\r\n\r\nThis project has been divided into separate packages that each have a single,\r\ndistinct, responsibility. This is done to make it as easy as possible to alter,\r\noverwrite or customise parts of DevNanny.\r\n\r\nThe chain of dependency is as follows:\r\n\r\n       Dev-Nanny/Dev-Nanny¹ ---> Dev-Nanny/ComposerPlugin² ---> Dev-Nanny/GitHook\r\n                    |\r\n                    `-> Dev-Nanny/Connectors¹ ---> Dev-Nanny/ConnectorBase\r\n                                               `-> Individual Connectors³\r\n    ¹ = Meta Package\r\n    ² = Composer Plugin\r\n    ³ = Dev Nanny Connector\r\n\r\n## Trouble Shooting /FAQ\r\n\r\n### What if I don't use `git` but `SVN`/`Mercurial`/`Bazaar`/etc.?\r\n\r\nYou will need to create an appropriate hook yourself. It will need to run\r\nDevNanny against the received file list. (See the *Usage* section)\r\n\r\nIf you decide to create such a hook, please share the result so others may also\r\nbenefit from your efforts.\r\n\r\nIf creating a hook seems too complex or daunting, feel free to open an issue\r\nrequesting an example or full implementation.\r\n\r\n### What if I don't use *any* versioning tool?\r\n\r\nIf you don't use any versioning tool *ever* you may want to consider starting to\r\nuse one *now*. You are missing out on great things!\r\n\r\nIf you don't use a versioning tool for a certain project, you can always just\r\nrun dev-nanny occasionally by hand or use a file-watcher or task-runner to run\r\ndev-nanny on an interval or whenever a file changes.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}